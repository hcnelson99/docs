Wyvern talk

Questions to answer
    MOTIVATION: Why another programming language?
    GOALS: What is Wyvern supposed to be good for?
    PRINCIPLES: What design principles does Wyvern follow in order to achieve those goals?
    DESIGN: What are the most important concrete aspects of Wyvern's design?
    RATIONALE: How does Wyvern's design derive from the goals and principles?
    FUTURE AND RATIONALE: What is the future for Wyvern, and how does that derive from the goals and principles?
    
MOTIVATION
    lots of PLs in research and industry
    no-one in PL takes programming in the large (PitL) seriously
        example issues:
            dynamic configuration and hierarchical information hiding
                explored separately, but hard to do together
            limiting non-hierarchical dependencies between modules
                Microsoft does this, but no PLs; would we get leverage from PL support?
            limiting resource use
                + capability-based type and module system
                + resource effect system that builds on capabilities
                link these to concrete tasks?
            limiting access to state
                + capability-based type and module system
                + run-time architecture building on this
                    integrity(Selva):
                        call from one component to another must go through interfaces between components
                            state owned by the component that created it?
                                but might have been created by pure code during initialization and passed to a component later.
                                this is good by default but not good in all cases; a factory component would be a great example of where it is not good
                            but isn't the above property just trivially true?  what is new here?
                            maybe just that all state is explicit and all initial connections are explicit
                        or do we want it to go through some object "owned by" or "blessed by" each component?
                            requires a comprehensive (though possibly optional/gradual) ownership system
                            can this be done in a minimally invasive way, where most specs are at the architecture level?
                                no need to annotate ownership when everything is owned by the same thing
                            why do we care?
                                intuitively I feel like I care about data that is shared widely across the architecture when the elements are not connected.  I think this should show up. 
                                    what task is related to this?
                            why do we care about run-time architecture anyway?  can we build concrete tools that help users with real tasks?
                            We care about this because in any specification that depends on state, we must know where the state resides, so if the spec crosses component boundaries we need to know about sharing
                        illustrations
                            REST depends on statelessness, except for a well-defined interface
    we can make a big difference (A) by focusing on PitL issues and (B) by using technically advanced PL techology from the ground up
GOALS
    domain: general-purpose (not specialized) applications (not systems or scripting or end-user) programming language
    human effectiveness (productivity on tasks, fewer errors)
    rigorous support for programming-in-the-large (my trademark area)
PRINCIPLES
    research principles
        PL: make properties rigorous - prove a theorem
        HCI: show the theorem relates to some real-world task, and that programmers get better at that task when they can rely on the theorem
        SE: make the task related to development at scale, based on SE theory
            (what is SE theory?)
DESIGN
    extensible language, where extensions look "built-in"
        no leaky abstractions: good error messages, no conflicts, etc.
            [note: our impl isn't there yet]
RATIONALE
FUTURE AND RATIONALE
    predicate assertions (base case: similar to typestate)
    include permissions to access fields - but have a type system that builds it in
    
    
NOTES FROM SKYPE MEETING
========================

(see Skype, I guess)