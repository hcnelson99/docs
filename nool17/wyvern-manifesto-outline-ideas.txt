\section{Introduction}

Philosophy
 - strong mathematical properties
 - in service of software engineering
 - with usability in mind

Goals
 - EXpress and enForce design in a Usable way
   - architectural control
   - security by default
   - flexible abstractions
   - ease of use

Strong reasoning : both strong properties and strong guarantees of them
 - but the properties are design-focused, e.g. as opposed to correctness focused
 
Usable enforcement
 - avoid duplication: functionality and a spec that checks it
   - instead, embed the spec naturally into the way the system is constructed
   
Design features
 - Core object model based on Dependent Object Types
   - like Scala, but avoids trait complications and applies uniformly to module system
     - facilities such as reflection, casts respect type-based abstraction (META); casts are tag checks (ECOOP)
   - flexible but also supports strong, hierarchical abstraction; benefits from usability of objects [XFU]
 - Capability-safe objects and first-class modules: ECOOP 17
   - least-privilege security architecture [F]
   - more broadly, provides architectural control [F]
   - does all of this constructively rather than with burdensome checks after the fact [U]
     - distinguishes resources that we must track, from pure objects which we don't: Glacier
   - first-class nature [X]
 - Extensible language: ECOOP 14
   - provides domain-specific expressiveness and high usability [XU]; avoids temptation to represent little languages with strings, leading to command injection attacks [F]
   - motivated by web applications but avoids building in web-specific features

Example
 - software architecture
   
\appendix
\section{Appendix Title}

This is the text of the appendix, if you need one.

\acks

Acknowledgments, if needed.

% The 'abbrvnat' bibliography style is recommended.

