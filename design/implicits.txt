Thoughts on Implicits (in Wyvern, and in Scala)
===============================================

What I don't like
 A) not knowing what the dependencies of code are (this is visible where the code is defined but not where it is used)
 B) not knowing how those dependencies are fulfilled
 C) Scala resolves ambiguities by picking the innermost value.  That's correct most of the time but I definitely don't trust myself (or peers) not to forget the more inner value and assume an outer one was used.  Plus specificity is used, with ambiguity if the two criteria conflict.  Ugh.  Works most of the time, but that's not how we should program.
 
Both can be addressed with IDE support, but I don't like relying on IDE support for such basic tasks.
(B) is the more serious of the two.
    It is largely addressed if the implicit has to be in scope (and can't be imported with a X.*)
    But use of "import X._" where that brings in implicits seems to be extremely common in Scala, perhaps include most uses of implicits?
(A) is hard to address.  It differs in nature from higher-order functions or objects, in which you can see that a ho function or object with dispatch is being used.
On the plus side everything is statically reasoned about (this is actually better than OO or FP).  But the static reasoning is hard (for reason B above).

For context arguments (the common use of implicits) we can "bundle" them limiting the impact to one parameter per function.  Sometimes we can also combine the context with the receiver, which has a similar effect.  Subtyping and type parameters can allow us to abstract over the exact parameters used (potentially valuable, e.g. in the Object Algebras example from the paper, though I'd have to verify this).

I didn't find the examples in the POPL 2018 paper very compelling, but they are directed mostly at a FP audience.