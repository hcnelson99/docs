Dear authors,

The 32nd European Conference on Object-Oriented Programming (ECOOP 2018)
program committee is sorry to inform you that your paper #12 was rejected,
and will not appear in the conference.

      Title: Capabilities: Effects for Free
    Authors: Aaron Craig (ECS, VUW)
             Alex Potanin (ECS, VUW)
             Lindsay Groves (ECS, VUW)
             Jonathan Aldrich (ISR, CMU)
 Paper site: https://ecoop18.hotcrp.com/paper/12?cap=012aj1poFV77vs4

26 papers were accepted out of 66 submissions.

Reviews and comments on your paper are appended to this email.  I hope that
they are helpful to you.

I'd also like to make you aware of an opportunity to obtain visibility and
feedback on your work.  Please consider submitting a poster to be presented
at ECOOP/ISSTA 2018 in Amsterdam.  Submissions are due on May 18.
https://conf.researchr.org/track/ecoop-issta-2018/ecoop-issta-2018-posters#Call-for-independent-posters

Contact Todd Millstein <todd@cs.ucla.edu> with any questions or concerns.

- ECOOP 2018 Submissions

Review #12A
===========================================================================

Overall merit
-------------
C. Weak reject

Reviewer expertise
------------------
X. I am an expert in this area

Paper summary
-------------
Propagation and use of capabilities can be described by an effect system. Starting from a system with explicit effect annotations, the authors develop a second calculus without effect annotations which is augmented with an import facility to safely inject values from the explicitly typed part to the part without effect annotations.
This theory is put to work in a capability language which is discussed by translation to the calculus.

Points For and Against
----------------------
## points in favor

* approach to formal capability management without undue annotation overhead
* very simple system "first step"
* soundness proofs (paper and pencil)

## points against

* Effects don't seem to be an appropriate description for capabilities
* The static semantics for importing fully annotated effectful code into the unannotated world is very limiting (see below for details)
* The underlying calculus OC has zero novelty. In fact, the novelty boils down to one typing rule for the import!
* Translation of the module language in sections 4 and 5 has no formal description.
* examples are repetitive and not interesting

Comments for author
-------------------
1. I'm wondering why the authors choose effects to describe the propagation of capabilities through a piece of code. Effects are good at analyzing stuff that has happened during a computation. In contrast, coeffects (see work by Dominic Orchard) are good at describing capabilities that are passed into a computation and may be perused by it. Thus, coeffects should be better suited for the purpose of this paper.

2. Importing fully annotated code is governed by a single effect. This simplicity is an advantage, but it places severe limits on the expressiveness of the approach. This is because the same effect is used as an upper bound **and** as a lower bound. The latter use is to avoid crosstalk between several imported entities, which is necessary to ensure sound use of all imports.

3. The examples are rather poor and present subtle variations of the same underlying ideas. It would be much stronger if it was possible to develop a realistic example that pushes the limits of the approach. I suspect such an example would quickly run into the perceived limitations expressed in point #2 above.

4. Coming again back to point #2, it seems like a hybrid approach would yield a stronger system. The appropriate related work for such systems would be work on gradual typing, in particular Ron Garcia's work on gradual effect systems. In fact, applying that work would point out possible crosstalk effects to the programmer by inserting coercions. 

# Subreview

## Summary

This article presents an extension of the Wyvern language where import statements can be annotated with capabilities which will then be checked for proper usage in the body of the module thanks to a type-and-effect system.
For this purpose, the authors introduce two effect-based calculus (one explicit and one implicit) and a translation from some fragment of Wyvern.

## Review

While I appreciate the premise of providing a not-too-overwhelming capability system, and using effect for that purpose seem interesting, I find that the
developement and the formalization are quite disapoiting.

The aim is to ties in the capabilities with the module system through an annotated import statement. Yet, the calculus defined in the article do not capture that:
They simply provide a lambda-calculus with some very effect partial inference.
The novel rule, which aims to simulate imports, does not really capture the full
complexity present in a rich module systems such as Wyvern.

Even in this simplified setting, the presentation of the import rule in 3.3 is
overly complexe.
The main obstacle seem to be the treatement of variance, yet the author never
refers to the concept nor treat it in a principled manner.

Finally, the fragment of Wyvern that can be translated to the core calculus is very limited: modules with only one function and some specified capabilities.

## Misc comments

1. I was surprised not to find a more comprehensive description of Wyvern, which is not an extremely well known system. Also, the word "functor" has approximately 5 different definitions depending on the community. You might want to define it.

2. Shouldn't the set of operations Π be indexed by the resources on which they apply? Operations on file handles and network sockets are not the same, for example.

3. The use of subtyping here seems fairly heavy-handed to me, and not all that necessary. Shouldn't it be possible to simply modify (ε-Ressource) so that it accepts any set {\overbar{r}} as long as r∈\overbar{r}?

4. You are missing a ⊢ in rule ε-Abs in Figure 8.

5. Section 3.3 is very confusing, and doesn't do a very good job at showing concrete examples of where the difficulty lies. Showing a succession of subtly wrong versions of the main rule does not help at all. I believe the author should present their examples first, then explain the right rule directly.

6. I was disapointed by the choice of examples, both in the introduction and in section 5. They mostly revolves around fiddling with file write permissions. An effect system, especially one that supports high order effects, should be able to express much more interesting properties.


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #12B
===========================================================================

Overall merit
-------------
B. Weak accept

Reviewer expertise
------------------
Y. I am knowledgeable in this area, but not an expert

Paper summary
-------------
Programming languages with capability mechanisms can be used to enforce security
policies. For example, a capability can be used to control access to a resource,
such as the filesystem. Technically, a capability is a token (a value) that
cannot forged and that is used to grant permission to perform some action.

This paper examines the question of whether capabilities can be used to aid
formal reasoning about programs. Specifically, the paper considers whether
capabilities can aid reasoning about effects. The central idea is that
"imported" capabilities can be used to provide an upper bound on the effects
that an expression may perform. This enables a scenario where a program consists
of annotated and un-annotated parts. The annotated parts describe the expected
effects (as in a usual effect system) whereas the un-annotated parts have no
knowledge of effects. The import expression, the declaration of an effect upper
bound, is used to translate an un-annotated program into one with annotations
while ensuring that original annotations are not violated. That is, if the
annotated program part does not grant access to some effect `eff` then the type
system will reject an un-annotated program part that tries to invoke `eff`.

The paper presents a calculus "operation calculus (OF)" with effects where every
expression must be annotated with its effect. The paper presents a type system
for this calculus which ensures that a program cannot execute an effect without
having been granted access to it. In the sequel, the paper presents a calculus
"capability calculus (CC)" where the program is divided into annotated and
un-annotated parts. The paper extends the type system of OF to CC while
preserving capability safety. Finally, the paper presents several examples of
programs that satisfy/violate the protocol of the import mechanism.

Points For and Against
----------------------
At first sight, the idea that capabilities can be used to aid formal reasoning
seems obvious, so the answer to the question "can capabilities be used to
enhance formal reasoning ..." seems to be yes. However, diving into the paper,
it becomes clear that there is an interesting interplay between capabilities and
effects in a partially annotated program.

However, while I generally like the paper, I am bit unclear on two things: (1)
what are the exact contributions claimed and (b) whether the paper is a bit
mis-positioned. The title claims that the effects are for free, but really they
require some part of the program to be annotated. 

Points For:
- the examples were useful.
- well-written paper.

Points Against:
- clarity about contributions.

Comments for author
-------------------
# Major comments (for the author-response).

Could you provide a bullet-point list to identify the major contributions?

Could you relate your work back to some existing capability/effect systems? For
example, would your work improve on the sandbox technology in Java?

# Minor comments (not for the author-response).

Here are some questions I encountered while reading the paper. After reading the
entire paper, I can answer some of these questions already, but maybe you can
use them to improve the structure of the paper:

Page 2, top, what is your definition of effect?

Page 2, mid, if a capability is a token, how is that token made available to the
expression e? 

Page 4, top, what does it mean that a capability or operation cannot be created
or destroyed? Give an example?

Page 5, bot, why is unit not in the grammar for types? (because it is encoded,
but that is only explained later.)

Page 5, bot, font for "effects" look wierd.

Page 6, bot, explain why you add/need sub-typing.

Page 10, top, OC and CC would have been more consistent if in CC you had used
hats to represent un-annotated code. Instead, you add un-annotated code but give
it the syntax of annotated code...

Page 21, top, "functino" typo. :)

Page 22, top, is the annotation on log correct? Is it not \emptyset?

Page 23, top, "int erface" typo.

Page 25, mid, perhaps use \citeauthor or rework your sentences not to start with
a numbered reference?


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


Review #12C
===========================================================================

Overall merit
-------------
C. Weak reject

Reviewer expertise
------------------
Z. I am not an expert; my evaluation is that of an informed outsider

Paper summary
-------------
This paper presents a calculus (OC) based on lambda calculus that allows
annotating code with capabilities (such as reading or
writing a file), which capture effects. It presents a second calculus
(CC) that supports mixing annotated and unannotated code, but still
permits to reason about capabilities and effects. This is done
by giving an interface to unannotated code in the form of an
import specifying the capabilities for the entire unannotated program.

The paper presents syntax, semantics, and soundness proofs
for both calculi. It also presents a way to translate 
Wyvern-like programs to CC. The paper shows how CC can be used
to reason about a few small fragments of code.

Points For and Against
----------------------
This paper is well written, but presents the following shortcomings.

In OC the distinction between operation call and function application
seems artificial. It is unclear from the paper what becomes
a base capability for a resource, or even what a resource is.
Most of the examples in the paper are about a File as resource
and logging, so more examples in this regard would have helped.
In an object-oriented setting, would an object be considered
a resource and its methods capabilities? Or are resources external
to the code (such as files, sockets, etc...). The notion
of resource and capabilities need to be defined a lot more 
precisely. 

Another consideration is composition of resources. In an 
object-oriented setting with ownership, one could imagine
that a resource could be a collection of objects and the 
methods of the owner would be its capabilities. It would have been
nice for the formal model to support some sort of notion
of composition of capabilities. Likewise, instead of having 2 
different notions for operation call and function
application, it would have been good to see a "base case"
capability and a way of "composing" capabilities together.

In the paper capabilities are compared by set inclusion.
Is it possible to define more elaborate relations between
capabilities? One could imagine for example that a
method that both reads and writes a resource has more
capability than one that only reads or only writes.

One of the benefits claimed by the paper is that
the calculi allow reasoning about code that is
a mixture of both annotated and unannotated code.
However, the unannotated code requires an interface
that specifies its capabilities. This seems hardly
practical: it means that every library of
unannotated code that is used must first be
transformed to contain one of these import
statements. Getting that import statement right is
probably hard, if not impossible if the resource
usage of the library is not known statically.

The Applications section only presents small examples,
many of which are again about Files and loggers.
It is not very convincing unfortunately.

The related work section is very slim.

Response by Alex Potanin <alex@ecs.vuw.ac.nz>
---------------------------------------------------------------------------
We thank the reviewers for their comments. There is just one thing to clarify in regard to review 1: we are trying to manage effects using capabilities, not the other way around. Our goal is to control what the code does, not what it depends on. Thank you.