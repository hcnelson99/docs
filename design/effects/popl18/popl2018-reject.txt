POPL '18 Paper #73 Reviews and Comments
===========================================================================
Paper #73 Capabilities: Effects for Free


Review #73A
===========================================================================

Overall merit
-------------
2. Reject - will argue against

Reviewer expertise
------------------
X. Expert

Paper summary
-------------
Summary:

This paper describes a pair of type and effect systems "OC" and "CC".
OC appears to be a standard monomorphic type and effect system.  CC adds 
capabilities to OC and allows for "unannotated" subexpressions.  These
unannotated subexpressions must be closed except for the capabilities that
are passed to them; the programs may have the effects associated with
the capabilities.  The authors prove both calculi sound using conventional
techniques.

Pros:

+ simple
+ elegant
+ tutorial

Cons:

+ too tutorial for popl
+ thin intellectual contribution; minimal impact

Analysis:

This paper would make a wonderful tutorial for graduate students
learning type systems.  For that reason, I would very much like to see
the work published.  I can easily imagine using this paper in a class
I might teach.  Well done!  Unfortunately, I do not think POPL is the
right venue.  It is too slow going and the conceptual delta beyond
other work on type and effect systems is not high enough for a venue
like POPL.  Perhaps this would work well as a Pearl in JFP (you might
even ask the POPL chair if he would forward the reviews to the JFP
editor)?

Section 2 of the paper describes the operation calculus.  As far as I
can tell, this is an entirely standard type and effect system -- a monomorphic,
explicitly typed variant of, say, Tofte and Talpin's region calculus without
letregion (but with generic primitive operations and effects).  The authors
spend 5-6 pages describing this calculus and even a page writing out the
lemmas for a standard type safety proof.  If there is something new in
this calculus, it gets lost as I tried to skim through the old stuff as
quickly as I could, looking for something to grab my interest.  (Again,
this would be very nice for grad students, but not for an experienced
POPL attendee.)

Section 3 describes CC.  There are some new things here.  For
instance, the operational rule that does annotation is interesting and
the typing rule for the unannotated code is interesting.  Still, I
have seen some of the key concepts before.  For instance, the fact
that the unannotated code must be closed except for effects related to
the capabilities explicitly passed in is an invariant I would have
expected.  This is really a key concept in Tofte and Talpin's work
(that effects on arrows must capture *all* of the effects that may be
executed in a closure, for instance).  (It is also emphasized again
here http://dl.acm.org/citation.cfm?id=507658 more directly).  I can't
recall seeing the kind of co-variant/contra-variant safe/ho-safe
functions described before.  Still, I think this level of contribution
would be better suited for a workshop than popl.

The two pages of proof in section 3 are not necessary.  The community
understands how to do safety proofs for these kinds of type systems.
Overall, I believe this paper could have delivered its message to the
popl audience in 10-15 pages effectively rather than 25.

Comments for author
-------------------
Minor:

The name "capability calculus" is a bit unfortunate as there is another
calculus that also talks about the interactions of types, effects and 
(static) capabilities by the same name:

Typed memory management in a calculus of capabilities
http://dl.acm.org/citation.cfm?id=292564

The two are different, but closely related.  The "static" capabilities
take the place of effects and are managed in part via a linear typing 
discipline.  The language is more complicated (a negative) but more
expressive.

The authors might also be interested in the following talk, which describes
the relationship between many related systems at the time:

http://pauillac.inria.fr/~fpottier/slides/fpottier-2007-05-linear-bestiary.pdf

p 2. It was weird to see a mention of the simply-typed lambda calculus and
then a reference to Pierce's book.  I'd remove the reference.  

Very minor: Instead of 3 rules to extend --> to -->*, it is slightly
more elegant to use two:

--------- (reflex)
e -->* e

e1 --> e2   e2 -->* e3
---------------------- (trans)
e1 -->* e3

Reaction to author response
---------------------------
I read the response -- thank you for your perspective.  I agree that simplicity is an important component of many of the strongest popl papers.  The key critique of the paper is really insufficient novelty.



Review #73B
===========================================================================

Overall merit
-------------
3. Weak reject - will not argue against

Reviewer expertise
------------------
X. Expert

Paper summary
-------------
The paper demonstrates the use of capabilities for reasoning about effects for free. It presents a calculus CC that combines annotated effectful terms with unannotated (in terms of effects) effectful terms. By using capabilities, since we can bound the effects that unannotated terms can perform, the paper shows how we can reason about the combined program by using only type checking (and not effect checking) on the unannotated terms. It shows some small examples showing that such a calculus can help catch implementation bugs.

Comments for author
-------------------
As I understand, the main idea of the paper is to use capabilities to bound effects for a term, and that simplifies the reasoning about the terms, for example, one does not need effect inference.

The problem is that the paper considers a very simple setting, where even effect inference could work well. For example, looking at Figure 6, even if the effect annotation is not there on the arrow type, can't we see this system also as "synthesizing" effects? If so, then for the unannotated term, why can't we simply synthesize its effects and check that the effects are bound by the imported effects? The language considered in the paper is too simple, it does not even allow proper mix of unannotated and annotated terms, e.g. unannotated terms cannot embed annotated terms.

Also, the main contribution of the paper, the E-Import rule on Fig. 24, seems quite restrictive. For example, it cannot typecheck the expression: `import (File.append) x = File in x.append`, right? Because, `\hat{tau} = File`, `effects (File) = {File.*}`, and that's not less than `File.append`, whereas the program seems quite legit.

As far as effect inference goes, it gets complicated in the presence of effect polymorphism but otherwise there are some nice results that work well, for example "Lightweight Monadic Programming in ML, ICFP 2011".

Modeling capabilities as effects and reasoning about them as such is a nice idea, but can it be applied to more interesting settings?

Reaction to author response
---------------------------
Thanks to the authors for the response. Simplicity is quite important, but the contributions of the paper were hard to judge in such a simple setting.



Response1 Response by Alex Potanin <alex@ecs.vuw.ac.nz>
---------------------------------------------------------------------------
We would like to thank both of the reviewers for their reviews.

We would like to clarify that section 2 describes the fully annotated system with section 3 showing how unannotated and annotated code can benefit from capability reasoning.

Both reviewers criticize the paper for its simple setting.  This was in fact intentional; we believe that a simple setting is best for elucidating our contribution: a foundational understanding of how capabilities contribute to formal reasoning--a question that has not been studied explicitly before.

The POPL FAQ states, "To be accepted at POPL, a paper must discuss programming languages in some way, shape or form and it must have the potential to make a lasting impact on our field."  (https://conf.researchr.org/track/POPL-2018/POPL-2018-papers#r7)  There is nothing about this that requires complexity, and in my experience the very best papers describe a simple idea at their heart.  It is our belief that capabilites are a simple but absolutely fundamental idea, and that leveraging them to simplify formal reasoning (in our paper, capabilities allow programmers to reason about the effects of arbitrarily large components, without even requiring the code to be available, as inference techniques require) will indeed have a lasting impact on the field of computing.