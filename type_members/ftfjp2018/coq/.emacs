;
; Very basic gnu emacs customisation.  Turns on font colouring.
;
(custom-set-variables
 '(global-font-lock-mode t nil (font-lock)))
(custom-set-faces)

;;setq twelf-root "/u/others/mackayjuli/Scratch/twelf/") (load (concat twelf-root "emacs/twelf-init.el")

(load "~/.emacs.d/lisp/PG/generic/proof-site")

;; Coq symbols

(global-prettify-symbols-mode 1)


(setq coq-symbols-list '(lambda ()
        (mapc (lambda (pair) (push pair prettify-symbols-alist))
            '(("forall". ?∀)
              ("exists". ?∃)
              ("~" . ?¬)
              ("/\\" . ?⋀)
              ("\\/" . ?⋁)
              ("=>". ?⇒)
              ("->". ?→)
              ("<-" . ?←)
              ("<->" . ?↔)
              ("nat" . ?ℕ)
              ("*" . ?×)
          ("bot" . ?⊥)
          ("top" . ?⊤)
          ("decl" . ?σ)
          ("ty" . ?τ)
          ("env" . ?Γ)
;;        ("path" . ?ρ)
          ("vdash" . ?⊢)
          ("dashv" . ?⊣)
          ("equiv" . ?≡)
          ("equiv_t" . ?≡)
          ("equiv_d" . ?≡)
          ("equiv_p" . ?≡)
          ("equiv_e" . ?≡)
          ("hasType" . ?:)
          ("swap" . ?↔)
          ("swap_t" . ?↔)
          ("swap_d" . ?↔)
          ("swap_p" . ?↔)
          ("swap_e" . ?↔)
          ("swap_n" . ?↔)
          ("rshift_v" . ?⇁)
          ("rshift_t" . ?⇁)
          ("rshift_d" . ?⇁)
          ("rshift_p" . ?⇁)
          ("rshift_e" . ?⇁)
          ("lshift_v" . ?↽)
          ("lshift_t" . ?↽)
          ("lshift_d" . ?↽)
          ("lshift_p" . ?↽)
          ("lshift_e" . ?↽)
      ("ljump_n" . ?↶)
      ("ljump_v" . ?↶)
      ("ljump_t" . ?↶)
      ("ljump_d" . ?↶)
      ("ljump_p" . ?↶)
      ("ljump_e" . ?↶)
      ("rjump_n" . ?↶)
      ("rjump_v" . ?↶)
      ("rjump_t" . ?↷)
      ("rjump_d" . ?↷)
      ("rjump_p" . ?↷)
      ("rjump_e" . ?↷)
          ("notin_t" . ?∉)
          ("notin_d" . ?∉)
          ("notin_p" . ?∉)
          ("notin_e" . ?∉)
          ("nil" . ?∅)
          ("ni" . ?∋)
          ("cont" . ?∈)
          ("<;" . ?≤)
          ("<;;" . ?≤)
          ("sup" . ?≥)
          ("ext" . ?≤)
          ("/t" . ?/)
          ("/d" . ?/)
          ("/p" . ?/)
          ("cast" . ?⊴)))))

;; Prettify Coq script editor

(add-hook 'coq-mode-hook coq-symbols-list)

;; Prettify Coq output in proofs
(add-hook 'coq-goals-mode-hook coq-symbols-list)
